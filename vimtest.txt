================================================================================

  VIM Quick Chart - 
  Christian Stammen
  Version 1.10

  Note: make sure tabstop = 8
  Changelog:
	vimwiki

================================================================================

{{{ Vimwiki
<leader>ww Open wiki
<CR> create link for text under cursor
<Backspace> go back one screen
*text* bold
_text_ italic
==text== title text

}}}
{{{ Remap
nnoremap will swap keys instead of remapping them. 
         watch the second n in nnoremap
}}}
{{{ ColorColumn
following procedure will highlight rows that are longer than 80 columns:

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)
}}}
{{{NEW TRICKS
set relativenumber


}}}
PLUGINS: {{{

vundle = plugin manager
nerdtree = file drawer - (mapped to CTRL-n)  map <C-n> NERDTreeToggle<CR>
ctrlp = fuzzy file finder
fugitive = git tool
syntastic = syntax checker / linter

}}}
VIMRC FUNCTIONS: {{{

'wildmode' - choose how to display TAB functions. (file, color, etc.  expansions.) 
:set scroll=1 // After this you can use CTRL+E and CTRL+U instead of CTRL+E and CTRL+Y (wrong windows key mappings)
:set pastetoggle=<f5>

set 'visualbell' to check if motions are valid.
this can be handy to see for macros. 

set t_vb=^[\|100f
Dus : CTRL-V escape, en dan de pipe escapen met backslash
(Werkt niet onder linux)

}}}
COMMAND MODE: {{{

:e {file}  = edit file.
:e!        = reload current file.
:w {file}  = write file. (:wq!)

x = delete in normal mode
X = backspace in normal mode
d = delete {MOTION}
diw = delete in word.
v = visually select.

Navigate in normal mode with hjkl.
b = Back a word./ B = Back WORD.
w = Next word.  / W = Next WORD.
e = End of word./ E = End of WORD.

a = append (insert mode)
A = append + move to EOL
i = insert (insert mode)
I = insert + move to BOL (begin of line)
d = delete
D = delete until EOL
c = change (from cursor pos)
C = change until EOL (+insert)
s = change character at cursor
S = change complete line.

o/O = insert new line up/down + insert

ctrl+[ = End edit mode! (==escape)

($) Shift+4 = end of line
(^) Shift+6 = beginning of line

gg   = go to top of file.
G    = go to end of file.
500G = go to line 500
CTRL+o = go back where you came from! (after search, etc.)
CTRL+i = go forth where you came from :) 

}}}
YANK / CHANGE COMMANDS {{{

copy and paste = YANK and PASTE

Yanking goes into unnamed buffer AND into buffer 0. Choose buffer by using ":
"ayaw       	= yank into buffer a
"ap		= paste buffer a

All other operations (x, c, etc.) change unnamed buffer, but NOT buffer 0. 

yy = yank (copy) whole line
yi = yank inside 
p  = paste below.
P  = paste above.
c  = change {MOTION} (delete en dan een motion + brings you into INSERT mode)
caw = change all word - including whitespace - and go to editmode.
ctD = change till capital-D 
c3w = change 3 words

dd = delete whole line
cc = change whole line
S  = change whole line
C  = change line from cursor

r  = replace character
R  = replace more characters (normal editor insert mode)

}}}
MOTIONS / JUMPS: {{{

h/j/k/l/^u/^d/w/b/$/^/0/gg/e etc.
a = all
i = in
t = til
f = find forward
F = find backward
{ / }  = next / previous paragraph
( / )  = next / previous sentence

:set path   = set path for gf (jump to file)
<leader>0   = custom set for fuzzy file finder

H/M/L       = high / mid / low cursor pos on screen
}}}
SEARCH FUNCTIONS: {{{

:set incsearch
:set noincsearch

:set nohlsearch 

/ = brings you into search mode (down).
? = brings you into search mode (up).
* = search word under cursor
# = search previous
N / n = Next / Previous search action (WORKS!)
:noh = disable highlight search (until next search)

f {CHAR} = find occurence of {CHAR} to the right
F {CHAR} = find occurence of {CHAR} to the left
 --->> [,] and [;] jump between previous / next occurence
 
% = Range over entire document.
%s/<from>/<to>/g   s = substitute, g = global (othewise it would only change the first word on each line)

s/from/to		= replace first occurence in sentence
s/from/to/g		= replace all occurence in sentence
%s/from/to/gc		= replace all occurence in document + prompt! (AWESOME!)
%s/from/to/gci		= replace all occurence in document + prompt! case insensitive.
:set ic			= set ignore case
:set ic?                = check if ignore case is on (? works for everything)
:set noic		= case sensitive

/\Va.k.a.       = search for a.k.a. (very literal)
                  the \V makes it literal.

Case is overriden by the \C and \c parameter in search:
\C = case sensitive
\c = case insensitive

:set smartcase  = if search pattern contains uppercase character
                  then it will use sensitivity.

:set hls         	= set highlight search
:set nohls		= disable highlight search
:set is                 = set incremental search (search while typing)
:set nois		= disable inc search

FIND DIFFERENCES:
:diffsplit {filename} 		= open new tab
:vert diffsplit {filename} 	= use with vertical split
:diffoff 			= end

SUPER FAST SUBSTITUTION:
step 1: use * to find what you want to change
step 2: use cw to make the change for the first word
step 3: use :%s//<C-r><C-w>/g     this performs it for all occurences.
note - s//destination/g instead of s/source/dest/g uses the LAST search criteria (*)

SEARCH DOUBLE ROWS:
:syn clear Repeat | g/^\(.*\)\n\ze\%(.*\n\)*\1$/exe 'syn match Repeat "^' . escape(getline('.'), '".\^$*[]') . '$"' | nohlsearch

}}}
SCROLLING FUNCTIONS: {{{

^E scroll down
^Y scroll up
^F / ^B page scrolling

z.      re-center screen on cursor (cursor in middle)
zz      re-center screen on cursor too?

SHIFT+H/M/L  move cursor top/middle/low section of screen.

}}}
DIFFERENCE BETWEEN f (find) AND t (till) {{{

dt{SPACE} delete till space
df{SPACE} delete till including space

}}}
TAB COMMANDS: {{{

CTRL+W T    move window to new tab
gt          goto next tab
gT          goto previous tab
CTRL+W 10+  add 10 rows to tab
CTRL+W {arrow down}  Move to window below
:pc         close preview window
CTRL+W c    close window
:clo!       close window forced
CTRL+W =    equal size windows
CTRL+W n    new window
CTRL+W r    rotate windows
CTRL+W v    vertical split
CTRL+W H/L  move window to left and right
CTRL+W J/K  move window to up and down
CTRL+W o    make current window the only window (if possible)
CTRL+W CTRL+W  === move to next window!!
CTRL+W _    fullscreen 
:vsplit     create vertical split of same buffer

}}}
SELECTING / CLIPBOARD AND REGISTERS {{{

V           select
CTRL+v      select block
SHIFT+v     select lines
"*y         yank to clipboard
"*p         paste from clipboard
P           paste (like a normal paste) unnamed reg
"0p         paste yanked clip (0 = yank register)
:reg "0     show register "0
"ay         overwrite "a register
"Ay         append "a register
"_          black hole register (nothing comes from this)
"+          system clipboard - win/mac (enable this)
"*          X11 clipboard
"=          create expression - expression register
viw			mark select word
viwp		mark select word and paste


g; / g,     jump through change list
?.          jump to last change
?^          jump to last insert
gi          (same but also enable insert mode)

-- use 'o' to toggle the 'free end' in visual mode.
-- use gv to re-select your last selection.

EX-Mode commands:
CTRL-r "    		= paste yanked text into command.
[command mode]  "ayaw   = copy all word in register a
		"byaw	= copy all word in register b
CTRL-r a		= paste reg.a
CTRL-r b		= paste reg.b
CTRL-r w		= word under cursor
CTRL-r =6*12	= calculate shit

}}}
UNDO COMMANDS: {{{
u      = undo
U      = undo whole line
CTRL+r = redo

}}}
UPPERCASE / LOWERCASE {{{

g~			Swap case
~			Changes case of 1 character
gu / gU     Lower-/uppercase

gUap		--> Uppercase paragraph
gUgU		--> Uppercase line
gUU			--> Uppercase line
gUit		<happened>shit</happened>

}}}
FOLDING {{{

zf		= fold selection
za		= toggle fold on/off
zd		= delete fold under cursor
zM		= close all folds
zR		= open all folds

Save folds with the ':mkview' command.
This saves them into the viewdir folder (:h viewdir)
To load the folds, press :loadview

Automated for vimrc:

augroup AutoSaveFolds
  autocmd!
  "autocmd BufWinLeave * mkview
  "autocmd BufWinEnter * silent loadview

  autocmd BufWritePre * mkview
  autocmd BufReadPost * silent loadview
augroup END

}}}
PARENTHESES EXAMPLE {{{

%			= search matching parentheses ((a+b)+(a))
			= (use matchit.vim plugin for matching xml tags)

Say we want to change (hello) to [hello]
f(%r]??r[
?? can be replaced by CTRL-O

There is a plugin called 'surround.vim' that helps.

}}}
MACROS {{{

q{key} = start macro recording
q      = stop  macro recording
@{key} = run   macro
@@     = repeat last invoked macro
:reg a = show macro a

:put a = print macro to text (for editing)
"ay$   = copy macro back into register

create macro, select lines with V and then:
:'<,'> normal @a
this executes macro for each line in parallel

:%normal abcdef		= run abcdef commands for each line

}}}
MARKS {{{

Note: when {key} is capital, it is global. If not it is local (current buffer)

m{key}		= mark
'{key}		= go to mark (beginning of word)
`{key}		= go to exact mark  (not ?)

}}}
VARIOUS {{{

.			= Repeat last command
^a			= add 1 to the number its currently on
CTRL+g      = show status
:set ruler  = show status bar
:!ls        = external command (ls)
v :w temp   = select portion and save to file.
:r temp     = retrieve (insert) text from file
:r !dir     = output of command into text!! (AWESOME)

:r $VIMRUNTIME/vimrc_example.vim
help vimrc-intro

configure airline correctly:
- also install powerline fonts for terminal (otherwise bar is not displayed
  correctly)
set guifont=Liberation\ Mono\ for\ Powerline\ 10 
let g:airline_powerline_fonts = 1

http://stackoverflow.com/questions/19105279/how-can-i-setup-my-vim-airline-or-vim-powerline

:set nocp		= set no compatible mode (with VI)
:e CTRL-D		= show all commands that start with e
CTRL+] (in help)        = navigate to this help item. CTRL+o goes back.

>G indenting
<C-a> <C-x>  add / subtract integers
set nrformats=    (007 == geen octaal getal - treat all as decimal)
set nrformat-=octal

> Shift right?  < Shift Left?
=           Auto indent
\\G  comment lines until EOF
\\\  comment line
\\ap comment par

gg=G    auto-indent complete document
ga  	print ascii value of char under cursor
gf	jump to file under cursor

Ctrl-o (in insert mode) : enter "insert normal mode" for doing only 1 normal
command, such as centering the screen (zz)

:2,5p                  	// print  range 2 to 5
:.,5s/shit/happens		// rename action on lines <current> to 5
:.,.+3p                 // print current line and next three lines.
'm,'n                   // from mark m to mark n
:[range]yank[reg]       //
:[line]put[reg]         //
:[range]move {address}  // ook wel :m
:[range]delete[reg]     //
:copy  is gelijk aan :t // (think of it as copy TO)
:!./%                   // <<- run current file (for instance test.py)

Write every line with error to another textfile:
:g/^Error/execute '.-1,.+1w '.line('.').'.txt'

echo each line and do some stuff with it: (replace . with ^ for all lines)
:g/./execute '.-1,.+1p|echo "'.line('.').'LALA"'

}}}
INDENTING WITH NUMBERS {{{

:let i=1
qa         record macro a
I          go to insert
Ctrl-R =i  insert number
add " >"   just for the show
shift-V    select rows
:normal @a run macro a for each row
done!

}}}
SPECIAL CHARACTERS {{{

<C-v>065        use three digits for putting ascii chars
<C-v>u1234      same but for unicode
<C-v>u00bf      put in ¿

}}}
TABS AND TEXTWIDTH {{{

:set expandtab / noexpandtab = use spaces for tab
 --> shiftwidth 	sw	(indent)
 --> tabstop		ts	(change this and tabs in buffer change!)
 --> softtabstop	sts	(act on spaces like it were tabs) -goes 1st

set textwidth=78

:set shiftwidth=4 softtabstop=4 expandtab
:set tabstop = softtabstop = shiftwidth 

}}}
REPLACE TRICKS, SELECT/NORMAL CMDS {{{

use shift-v to select a line, and then r- to replace all chars!
<Shift>Vr-   --> ---------------------------------------------

50a-{ESC}   = add 50x -----------------------

step 1. block mode select  (multiple rows)
step 2. c for change->insertmode
step 3. type a replacement word
step 4. BOOM your word is all over the fucking place!

step 1. block mode select  (multiple rows)
step 2. $ for select all till end of line
step 3. A;              // adds ; to all lines!
step 4. Profit!!! (works also for I)

step 1. add A;
step 2. VG (select all till end of file)
step 3. :'<,'> normal.           do the same step for each line
step 4. Profit again!!!

:%normal A; 
profit! :)

:g!/OPC Name/d     	Delete all lines not containing OPC Name

SAVE EACH LINE INTO A SEPARATE FILE:
:g/./execute '.w '.line('.').'.txt'    --non empty lines
:g/^/execute '.w '.line('.').'.txt'    --all lines

}}}
OUTPUT REDIRECTION {{{

nnoremap <silent> <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

:redir @a         redirect output to register a
:g//              repeat last global command
:redir END        end redirection
:new              create new window
:put! a           paste register a into new window

:%! sort -k2		Sort text in buffer on column 2
:%! column -t		Make columns of all text in buffer
 
}}}
FILE OPERATIONS {{{

:find vimt*.* 		Open a file using find
:E					Open file selector (netrw)

:args				show content
:args *.txt			set content
:tab all			open them in tabs


vim ./non/existing/directory/file.txt
[DIRECTORY] indicator shows nonexisting dir + file.
Fixed by creating the directory using:
:!mkdir -p %:h

-- SAVE TROUBLE!! --
Whenever you try to save a file but forgot to open it as sudo, you may
want to save it by using the following trick:
:w !sudo tee % >/dev/null    (works also without >/dev/null)

}}}
CODE COMPLETION {{{

Use "ctags -R" in command to create a tags file that vim can use.

TagListToggle is mapped to <leader>l

In INSERT mode you can then 
CTRL-X CTRL-] to code complete a function name.

Use CTRL-] to jump to the definition of a certain function. Then use CTRL-T or
CTRL-O to jump back. Also use CTRL-O / CTRL-I to jump 'back & forth'.

CTRL-X CTRL-F for Filename completion  (then use CTRL+N and CTRL+P to browse)

CTRL-X CTRL-P = complete from previous sentence. (context aware: REPEAT THIS)
CTRL-X CTRL-N = complete from 'next' sentence. (context aware: REPEAT THIS)
CTRL-X CTRL-L = complete line (also context aware.)

CTRL-X CTRL-O = Omnicomplete

}}}
PYTHON CODING (FLAKE, ETC.) {{{

let mapleader=","

Push F7 for flake check, or...
autocmd FileType python map <buffer> ,f :call Flake8()<CR>

nmap ,p :w<CR>:!python3 %<CR>

nmap cp :ConqueTermVSplit python3<CR>

Use CTRL+Z to console, and 'fg' to go back. 



K		= use program on keyword under cursor
		= use keywordprg (kp) to select the tool
		  (for instance, use 'dict'

}}}
DICTIONARY FUNCTIONS {{{

:set spell
Set spelling.

zg = add good word to dictionary
zd = delete word from dict. 

:set complete
Show where CTRL-P is looking  

Show enter tabs and whitespaces:
:set list
:set listchars=tab:!·,trail:·,eol:¬

}}}
TMUX OPERATIONS {{{

CTRL-B D = DETACH
TMUX ATTACH
CTRL-B ?       = KEYBINDINGS
CTRL-B C       = CREATE WINDOW
CTRL-B N / P   = NAVIGATE PREVIOUS / NEXT WINDOW
CTRL-B {NUM}   = NAVIGATE WINDOW #
CTRL-B [       = COPY MODE (FOR SCROLLBACK)
  /CTRL+SPACE  = SELECT
  /ALT-W       = COPY
CTRL-B ]       = PASTE

CTRL-B "       = split window in panes 
CTRL-B !       = delete panes (move them into new windows)
CTRL-B o       = next pane
CTRL-B CTRL-o  = rotate panes
CTRL-B (space) = change pane layout / hor / vert
CTRL-B up/down = (HOLD CTRL for moving window size!!)

}}}
IRSSI OPERATIONS {{{

/server 		: join server
/connect		: join server (new window)
/disconnect 		: disconnect from server
/wc 			: close window
ALT+{num} 		: goto window {num}
ALT+left/right		: navi window
/msg [user] [msg]	: send private message

}}}
BASH TRICKS {{{

crontab:  tasks to start when computer starts.  (autostart)
crontab -e 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h dom mon dow command

@reboot /usr/bin/vncserver :1

Ctrl-h     backspace
Ctrl-w     delete word
Ctrl-u     delete back to start of line

}}}
USEFUL EXTERNAL LINKS {{{

The power of G:
http://vim.wikia.com/wiki/Power_of_g

}}}

TODO:
Check help for 'function-list'

function! PrePad(s,amt,...)
    if a:0 > 0
        let char = a:1
    else
        let char = ' '
    endif
    return repeat(char,a:amt - len(a:s)) . a:s
endfunction

http://vimgolf.com
http://vimcasts.org

end of file :)

